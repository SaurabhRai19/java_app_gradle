plugins {
    id 'maven-publish'
}

version = scmVersion.version

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            // Replace OWNER and REPOSITORY with your GitHub username/repository
            // (must be both lowercase according to the documenations)
            url = uri("https://maven.pkg.github.com/saurabhrai19/java_app_gradle")
            credentials {
                // Make sure to generate a token with write-packages and read-packages permission: https://github.com/settings/tokens/new
                // You can either store the username and token in ~/.gradle/gradle.properties (use the gpr.user and gpr.key keys)
                // Or you can store them as environment variables e.g. in ~/.bash_profile or ~/.zsh depending on your shell (GITHUB_USERNAME and GITHUB_TOKEN keys)
                // Or you pass them via CLI: gradle publish -Pgpr.user=username -Pgpr.key=token
                // See at EOF for examples on how to store the credentials
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = 'org.group.example'
            artifactId = 'artifactjava'
            version = '0.1'

            from(components.java)
        }
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'tkgregory'
String imageName = "${dockerHubUsernameProperty}/spring-boot-api-example:$version"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
}

aws {
    region = findProperty('region') ?: 'us-east-1'
}

cloudFormation {
    stackName "$project.name-stack"
    stackParams([
            SubnetID: findProperty('subnetId') ?: '',
            ServiceName: project.name,
            ServiceVersion: project.version,
            DockerHubUsername: dockerHubUsernameProperty
    ])
    templateFile project.file("ecs.yml")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}
